EXPORT=DATABASE.IN:DATABASE
EXPORT=SERVER.LISTEN:PORT

## TEMPLATES

'target' -> ENCLOSING CreateListTemplate(transparency/Render)
'./templates/list.html' -> IN ReadListTemplate(filesystem/ReadFileSync) OUT -> TEMPLATE CreateListTemplate()

## DATABASE

# 'token' -> GROUP WriteToken(core/Group)
# 'todos' -> GROUP WriteTable(core/Group)
# '{"id":"1","task":"Go grab NoFlo"}' -> IN ParseJson(strings/ParseJson) OUT -> IN WriteTable() OUT -> IN WriteToken() OUT -> IN Write(pgorm/Write)

# 'token' -> GROUP ReadToken(core/Group)
# 'todos' -> GROUP ReadTable(core/Group)
# 'id,LIKE,\'%%\'' -> STRING Payload(strings/SendString) OUT -> IN Arrayify(adapters/TupleToArray) OUT -> IN ReadTable() OUT -> IN ReadToken() OUT -> IN Read(pgorm/Read)

# Database(core/Split) OUT -> SERVER Read(pgorm/Read)
# Database() OUT -> IN Payload()

Database(core/Split) OUT -> SERVER ReadListDb(pgorm/Read)
Database() OUT -> SERVER ReadActiveDb(pgorm/Read)
Database() OUT -> SERVER UpdateDb(pgorm/Write)

## HTTP

'/list' -> MATCH ListTodos(woute/Match)
'/active' -> MATCH GetActiveTodos(woute/Match)
'/update' -> MATCH UpdateTodos(woute/Match)
'POST' -> METHOD UpdateTodos()

Server(webserver/Server) REQUEST -> IN BodyParser(webserver/BodyParser) OUT -> IN ListTodos() FAIL -> IN GetActiveTodos() FAIL -> IN UpdateTodos() FAIL -> IN Missing(woute/Match)
Output(core/Merge) OUT -> IN SendResponse(webserver/SendResponse)

# Listing TODOs

'true' -> KEEP ListQuery(cache/Cache)
'todos' -> GROUP ListTable(core/Group)
'id,LIKE,\'%%\'' -> IN ArrayifyListQuery(adapters/TupleToArray) OUT -> IN ListTable() OUT -> IN ListQuery()

'body' -> IN ArrayifyListPattern(adapters/TupleToArray) OUT -> PATTERN LiftListBody(lift/Lift)
LiftListBody() EXTOKEN -> GROUP ListToken(core/Group)
'1' -> THRESHOLD ReadListToken()

ListTodos() OUT -> IN ListToGroups(woute/ToGroups) OUT -> IN LiftListBody() EXTRACTED -> READY ListQuery() OUT -> IN ListToken() OUT -> IN ReadListDb()
ReadListDb() ERROR -> IN ReadListDbError(core/Output)
ReadListDb() OUT -> IN ReadListToken(groups/ReadGroups)
ReadListToken() GROUP -> RETOKEN LiftListBody()
ReadListToken() OUT -> IN ArrayifyReadOutput(adapters/PacketsToArray) OUT -> IN CreateListTemplate() OUT -> RETURN LiftListBody() OUT -> IN ListFromGroups(woute/FromGroups) OUT -> IN Output()

# Getting only active TODOs

'true' -> KEEP ActiveQuery(cache/Cache)
'todos' -> GROUP ActiveTable(core/Group)
'completed,=,true' -> IN ArrayifyActiveQuery(adapters/TupleToArray) OUT -> IN ActiveTable() OUT -> IN ActiveQuery()

'body' -> IN ArrayifyActivePattern(adapters/TupleToArray) OUT -> PATTERN LiftActiveBody(lift/Lift)
LiftActiveBody() EXTOKEN -> GROUP ActiveToken(core/Group)
'1' -> THRESHOLD ReadActiveToken()

GetActiveTodos() OUT -> IN ActiveToGroups(woute/ToGroups) OUT -> IN LiftActiveBody() EXTRACTED -> READY ActiveQuery() OUT -> IN ActiveToken() OUT -> IN ReadActiveDb()
ReadActiveDb() ERROR -> IN ReadActiveDbError(core/Output)
ReadActiveDb() OUT -> IN ReadActiveToken(groups/ReadGroups)
ReadActiveToken() GROUP -> RETOKEN LiftActiveBody()
ReadActiveToken() OUT -> IN ArrayifyActiveOutput(adapters/PacketsToArray) OUT -> IN JsonifyActiveOutput(strings/Jsonify) OUT -> RETURN LiftActiveBody() OUT -> IN ActiveFromGroups(woute/FromGroups) OUT -> IN Output()

# Creating/Updating TODOs

'true' -> KEEP UpdateQuery(cache/Cache)
'todos' -> GROUP UpdateTable(core/Group)
'completed,=,true' -> IN ArrayifyUpdateQuery(adapters/TupleToArray) OUT -> IN UpdateTable() OUT -> IN UpdateQuery()

'body' -> IN ArrayifyUpdatePattern(adapters/TupleToArray) OUT -> PATTERN LiftUpdateBody(lift/Lift)
LiftUpdateBody() EXTOKEN -> GROUP UpdateToken(core/Group)
'1' -> THRESHOLD ReadUpdateToken()
'^headers$' -> REGEXP RemoveHeaders(groups/RemoveGroups)

UpdateTodos() OUT -> IN UpdateToGroups(woute/ToGroups) OUT -> IN LiftUpdateBody() EXTRACTED -> IN RemoveUpdateInputGroups(groups/RemoveGroups) OUT -> IN ConvertUpdateInput(adapters/ObjectToPackets) OUT -> IN UpdateToken() OUT -> IN UpdateDb()
UpdateDb() ERROR -> IN UpdateDbError(core/Output)
UpdateDb() OUT -> IN ReadUpdateToken(groups/ReadGroups)
ReadUpdateToken() GROUP -> RETOKEN LiftUpdateBody()
ReadUpdateToken() OUT -> IN ArrayifyUpdateOutput(adapters/PacketsToArray) OUT -> IN JsonifyUpdateOutput(strings/Jsonify) OUT -> RETURN LiftUpdateBody() OUT -> IN RemoveHeaders() OUT -> IN UpdateFromGroups(woute/FromGroups) OUT -> IN Output()

# Missing TODOs

Missing() OUT -> IN Output()
